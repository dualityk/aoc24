(AOC24 by k.)

(Day 3: IT'S PARSE TIME BOYS)
':: 
  (Fetch our input into a list of strings, as usual.)
  "input03" READF POP DROP
  
  (advance: This routine advances the cursor through the current text,
   and both records and returns the !EOL flag.)
  ':: cursor + DUP 'cursor STO
     text LEN < DUP 'eol STO ;

  (evaliftrue: Given a boolean and an object, either evaluate it or return 
   false.  The kids call this syntactic sugar.)
  ':: #0 IFTE ;
  
  (getdigits: Acquire up to three consecutive numerals, and return as a
   string if successful.  Trailing garbage is gleefully ignored.)
  '::
    text cursor GET DUP isnumeral
    '::
      (We have already succeeded.  Keep our digit and try for 1-2 more.)
      #1 advance
      ':: text cursor GET DUP isnumeral
        ':: + #1 advance 
          ':: text cursor GET DUP isnumeral 
            ':: + #1 advance ;
            IFT DROP ;
          'DROP IFTE ;
        'DROP IFTE ;
      'DROP IFTE
      (We succeeded:) #1 ;        
    (We failed: the first digit was not a numeral.)
    ':: DROP #0 ;
    IFTE ;
  
  (rules: These are the rules for matching a mul instruction.  They must all 
   be met, in order, to generate a valid instruction.)
  { ::
      (First, it must start with "mul(".)
      text cursor DUP #3 + SUBS "mul(" == 
      (If it doesn't, the cursor must still be advanced by one character.)
      DUP NOT ':: #1 advance DROP ; IFT ;
    ::
      #4 advance
      (The next thing has to be a number.)
      ':: getdigits 
        (If there were digits, store them and proceed!)
        ':: >INT 'leftmul STO #1 ;
        evaliftrue ; 
      evaliftrue ;
    ::
      (Then a comma...)
      eol ':: text cursor GET "," == ; evaliftrue ; 
    ::
      #1 advance
      (Then another number.) 
      ':: getdigits
        (Store these digits too.)
        ':: >INT 'rightmul STO #1 ;
        evaliftrue ;
      evaliftrue ;
    ::
      (And finally, a close paren.)
      eol ':: text cursor GET ")" == ; evaliftrue ;
    ::
      (A victory dance for the successful.)
      #1 advance DROP
      (Do the multiplication if enabled.)
      enable
      ':: leftmul rightmul * total + 'total STO ;
      IFT
      (And tell the world of our triumph.)
      #1 ; }  
  
  ':: (Process one line of text.)
    ':: 
      '::
        (Don't actually care what the result is from replst; we're just
         chucking text at the rules until we hit the end of line.)
        rules replst DROP
        eol ;
      REP ;
    { rules text :cursor: #0 :eol: #1 :leftmul: #0 :rightmul: #0 } LOCAL ;
  
  '::
     (Part one: just the multiplication things, please.)
     input ':: rules parsestring ; FOREACH DROP "Part 1: " total + DISP 
     
     (Part two: add a couple of rules to the top of our parser to enable 
      and disable tallying as needed, then do this whole thing again.)
     #0 'total STO
     { :: text cursor DUP #3 + SUBS "do()" == 
         ':: #1 'enable STO #4 advance DROP ; IFT #1 ;
       :: text cursor DUP #6 + SUBS "don't()" ==
         ':: #0 'enable STO #7 advance DROP ; IFT #1 ; }
     rules + 'rules STO
     input ':: rules parsestring ; FOREACH DROP "Part 2: " total + DISP ;
  { parsestring rules getdigits evaliftrue advance input 
    :enable: #1 :total: #0 } LOCAL ;
'day03 STO


(Day 2: Nuclear watchdog)
'::
  (Retrieve and process our input, turning each line into a numerical list.
   Here we lean on the parser, which is just as happy to generate a list as
   it would be a single number.)
  "input02" READF POP DROP
  ':: " }" + "{ " SWAP + >OBJ update ; FOREACH

  (Reckon subroutine: evaluate rules ascending and descending together, 
                      returning the lower number of failures.)
  '::
    DUP LEN #1 -
      '::
        (Now loop through a single row.)
        (Our failure counts begin clear:) #0 #0
        '::
          (Fetch two adjacent numbers.)
          row idx DUP2 #1 - GET #3 ROLLD GET
          (Check that 0<difference<=3.)
          DUP2 - ABS DUP #0 > SWAP #3 <= AND
          (In bounds: increment appropriate fail count.)
          ':: >
            ':: #1 + ;
            ':: SWAP #1 + SWAP ;
            IFTE ;
          (Out of bounds: drop both numbers and increment both fail counts.)
          ':: DROP DROP #1 + SWAP #1 + SWAP ;
          IFTE
          (Continue until we're out of numbers.)
          idx #1 - DUP 'idx STO ; 
        REP 
        (Finally, return the lesser of the two results.)
        DUP2 < #3 ROLLD IFTE ;
      { idx row } LOCAL ;

  ':: 
    (Part 1: Tally the lines in which the delta between numbers is 1-3, and
             everything is moving the same direction.)
    (Our tally starts at zero:) #0
    (Start at the bottom of the list:) input LEN
    '::
      '::
        (Decrement our row index.)
        row #1 - 'row STO
        (Get and test a row.)
        input row GET reckon
        (Tally zero-error rows, and save a list of rows with 1 or 2 errors;
         any more will be an incorrectible error.)
        DUP
        ':: #2 <=
          ':: unsafe input row GET #1 >LST + 'unsafe STO ;
          IFT ;
        ':: NOT + ;
        IFTE
        row ;
      REP ;
    { row } LOCAL
    (Record our guaranteed safe count to add to part 2.)
    DUP 'safe STO
    "Part 1: " SWAP + DISP

    (Part 2: Tally the lines in which removing a single value will render
             the condition safe.)
    (Again our tally starts at zero:) #0
    (Start at the bottom of our new, smaller list:) unsafe LEN
    '::
      '::
        (Decrement row index and get next row.)
        row #1 - 'row STO
        (Excise each element in turn and re-test.)
        unsafe row GET DUP LEN #1 -
        '::
          ':: thisrow idx edit reckon 
            (Still unsafe, decrement and loop.)
            ':: idx DUP #1 - 'idx STO ;
            (Found a safe one, increment safe count and stop.)
            ':: #1 + #0 ;
            IFTE ;
          REP ;
        { idx thisrow } LOCAL
        row ;
      REP ;
    { row } LOCAL 
    (And add to our safe count from part 1 to get our final result.)
    safe + "Part 2: " SWAP + DISP ;
  { reckon input :unsafe: {} :safe: #0 } LOCAL ;
'day02 STO


(Day 1: Arguing with historians)
'::
  (First, retrieve our input as a list of strings, and discard the final
   empty line.)
  "input01" READF POP DROP

  '::
    (Then, for each line, parse the numbers into separate lists.)
    ':: >OBJ >INT listB + 'listB STO >INT listA + 'listA STO ;
    FOREACH DROP

    (Part 1: Read two columns of numbers, sort both, then return the sum of
             the absolute differences between each line.)
  
    (Sort the lists individually.)
    listA sort 'listA STO
    listB sort 'listB STO

    (Now obtain the sum of the absolute value of the differences in the lists.)
    (Our sum, left on stack:) #0
    (Our index:) listA LEN
    '::
      '::
        (Back through both lists.  Initial LEN points us to one past the end.)
        idx #1 - 'idx STO        
        (Fetch an item from each list.)
        listA idx GET
        listB idx GET
        (Find the absolute difference and add to our sum.)
        - ABS +
        (Repeat until our index is 0.)
        idx ;
      REP ;
    { idx } LOCAL 
    "Part one: " SWAP + DISP 

    (Part 2: Count the number of matches in list B of every entry in list A,
             then sum value*matches for each line.  The fact that we're
             already sorted will hasten our search.)
    (Our sum:) #0
    (Our A-index and also stop value for the B list:) listA LEN DUP #1 -
    '::
      '::
        (Get a test value from the A list.) 
        listA idx #1 - DUP 'idx STO GET 'itemA STO

        (Now search the B list for matches, if there are any left.)
        (Our match count:) #0
        (Which will remain zero if we're out of numbers.) max #0 >=
        '::
          '::
            (Prepare two tests: listB=listA, and listB>=listA.)
            listB max GET itemA
            DUP2 == #3 ROLLD >=
            (If >=, we use the == test as an integer to increment match
             count, and in either case seek downward.
             If <, our == is a guaranteed false and falls through to stop REP.)
            ':: + max #1 - 'max STO 
              (And leave this truth for REP:) #1 ;
            IFT
            (Also make sure we aren't out of list B indices.)
            max #0 >= AND ;
          REP ;
        IFT

        (Now multiply our count and test value, sum it, and loop.)
        itemA * +
        idx ;
      REP 
      "Part two: " SWAP + DISP ;
    { :itemA: () max idx } LOCAL ;
  { :listA: {} :listB: {} } LOCAL ;
'day01 STO


(General routines)

(This routine was developed straight from the algorithm, and I used it
 for 2023:7, inter alia, where a sort routine was required.)
'::
  (This is our local partition routine, which divides the list into two
   partitions.)
  '::
    '::
      (Make a pivot value in the middle of our part of the array.)
      list hi lo - #2 / lo + GET EVAL 'pivot STO

      lo #1 - 'lo STO
      hi #1 + 'hi STO
      '::
        (Move the left index right at least once, while the element at that
         index is less than the pivot.)
        ':: list lo #1 + DUP 'lo STO GET EVAL pivot < ; REP

        (Move the right index left at least once, while the element at that
         index is greater than the pivot.)
        ':: list hi #1 - DUP 'hi STO GET EVAL pivot > ; REP

        lo hi >=

        (If the indices crossed, fall out of the loop and return the 'hi' value.)
        ':: hi #0 ;

        (Else, swap the elements under our two cursors and repeat.)
        ':: list hi GET list DUP lo GET
           hi PUT
           SWAP lo PUT 'list STO #1 ;
        IFTE ;
      REP ; 
    { hi lo :pivot:#0 } LOCAL ;

  (This is our local recursion routine.  It sorts some or all of the list,
   divides it into partitions, then sorts those.)
  '::
    '::
      lo #0 >= hi #0 >= AND lo hi < AND
      '::
        lo hi partition 'p STO 
        lo p recurse
        p #1 + hi recurse ;
      IFT ;
    { hi lo :p:() } LOCAL ;

  (This is the local environment into which our subroutines go.  It presents
   a nicer interface to the user by passing on the full bounds of the list
   to start 'recurse' instead of making someone else do it.)
  ':: #0 list LEN #1 - recurse list ; 
  { recurse partition list } LOCAL ;
{ EVAL } STATIC
'sort STO


(Edit a single item out of a list.)
'::
  '::
    (Cut to left of index.)
    DUP idx LEFT
    (Cut to right of index and stitch together.)
    SWAP DUP LEN idx - #1 - RIGHT + ;
  { idx } LOCAL ;
'edit STO


(Evaluate the contents of a list in order, advancing after each list item
 which returns true, and stopping for the first item which returns false. 
 Returns true if each element also returned true.)
'::
  DUP LEN
  '::
    ':: 
      (Evaluate a list item.)
      _list _idx GETE DUP
      (Increment index and see if we a. succeeded and b. are not done.)
      _idx #1 + DUP '_idx STO _max < AND
      (Only pass our result on if we're leaving.)
      DUP 'DROP IFT ;
    REP ;
  { :_idx: #0 _max _list } LOCAL ;
'replst STO


(Take a gander to see if a character is numeric.)
':: { "0" "1" "2" "3" "4" "5" "6" "7" "8" "9" } SWAP HAS ;
'isnumeral STO
